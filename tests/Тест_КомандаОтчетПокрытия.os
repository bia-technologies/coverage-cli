#Использовать fs
#Использовать asserts
#Использовать "utils"

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:NestedFunctionInParameters-off
// BSLLS:MissingVariablesDescription-off

#Область ОписаниеПеременных

Перем Тестер;
Перем КаталогСборки;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТестДолжен_ОбъединитьДанныеПокрытия() Экспорт
	
	// конвертируем данные покрытия
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "genericCoverage.xml");
	ИмяФайлаРезультатовXML = ОбъединитьПути(КаталогСборки, "coverage.xml");
	ИмяФайлаРезультатовJSON = ОбъединитьПути(КаталогСборки, "coverage.json");
	
	КаталогТестовыхДанных = ПомощникТестирования.КаталогТестовыхДанных();
	ФайлПокрытия = ОбъединитьПути(ПомощникТестирования.КаталогЗамеров(), "coverage.csv");
	
	ИмяРасширения = ПомощникТестирования.ИмяРасширения();
	КаталогИсходныхФайловРасширения = ОбъединитьПути("src", "cfe", "edt");
	ФорматИсходныхФайловРасширения = ФорматыИсходныхФайлов.EDT;
	
	ИмяФайлаВнешнегоМодуля = ПомощникТестирования.ИмяФайлаВнешнегоМодуля();
	КаталогИсходныхФайловВнешнегоМодуля = ОбъединитьПути("src", "epf", "xml");
	ФорматИсходныхФайловВнешнегоМодуля = ФорматыИсходныхФайлов.XML;
	
	КонвертерJSON = Новый Конвертер(КаталогТестовыхДанных);
	КонвертерJSON.УстановитьФайлПокрытия(ФайлПокрытия);
	КонвертерJSON.УстановитьФайлВывода(ИмяФайлаРезультатовJSON);
	КонвертерJSON.ИспользоватьВнутреннийФормат();
	КонвертерJSON.ДобавитьИсходныеФайлыРасширения(ИмяРасширения,
		КаталогИсходныхФайловРасширения, ФорматИсходныхФайловРасширения);
	КонвертерJSON.РазобратьПокрытие();
	
	КонвертерXML = Новый Конвертер(КаталогТестовыхДанных);
	КонвертерXML.УстановитьФайлПокрытия(ФайлПокрытия);
	КонвертерXML.УстановитьФайлВывода(ИмяФайлаРезультатовXML);
	КонвертерXML.ДобавитьИсходныеФайлыВнешнегоМодуля(ИмяФайлаВнешнегоМодуля,
		КаталогИсходныхФайловВнешнегоМодуля, ФорматИсходныхФайловВнешнегоМодуля);
	КонвертерXML.РазобратьПокрытие();
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, КаталогСборки);
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	
	ПомощникТестирования.ВыполнитьКомандуОтчетПокрытия(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ДанныеПокрытия = Новый ПокрытиеGenericCoverage;
	ДанныеПокрытия.Прочитать(ИмяФайлаРезультатов);
	
	ПрограммныеМодули = ДанныеПокрытия.ПрограммныеМодули();
	Утверждения.ПроверитьРавенство(ПрограммныеМодули.Количество(), 4,
		"Проверка количества модулей для покрытия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт
	
	Тестер = Тестирование;
	Тестер.ДобавитьТест("ТестДолжен_ОбъединитьДанныеПокрытия");
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	КаталогСборки = Тестер.ИмяВременногоФайла();
	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Тестер.УдалитьВременныеФайлы();
	
КонецПроцедуры

#КонецОбласти