#Использовать fs
#Использовать asserts
#Использовать "utils"

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:NestedFunctionInParameters-off
// BSLLS:MissingVariablesDescription-off

#Область ОписаниеПеременных

Перем Тестер;
Перем КаталогСборки;

#КонецОбласти

#Область ОбработчикиСобытий

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт
	
	Тестер = Тестирование;
	
	ИменаТестов = Новый Массив;
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьXML_XML");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьEDT_XML");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьXML_JSON");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьEDT_JSON");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьКонфигурациюXML");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьКонфигурациюEDT");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьРасширениеXML");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьРасширениеEDT");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьВнешнийМодульXML");
	ИменаТестов.Добавить("ТестДолжен_КонвертироватьВнешнийМодульEDT");
	
	Возврат ИменаТестов;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	КаталогСборки = Тестер.ИмяВременногоФайла();
	ФС.ОбеспечитьПустойКаталог(КаталогСборки);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Тестер.УдалитьВременныеФайлы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТестов

Процедура ТестДолжен_КонвертироватьXML_XML() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументSources(Аргументы, ПомощникТестирования.КаталогИсходниковКонфигурацииXML());
	ПомощникТестирования.ДобавитьАргументFormat(Аргументы, "XML");
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 393,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьEDT_XML() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageEDT.xml");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументSources(Аргументы, ПомощникТестирования.КаталогИсходниковКонфигурацииEDT());
	ПомощникТестирования.ДобавитьАргументFormat(Аргументы, "EDT");
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 393,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьXML_JSON() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументSources(Аргументы, ПомощникТестирования.КаталогИсходниковКонфигурацииXML());
	ПомощникТестирования.ДобавитьАргументFormat(Аргументы, "XML");
	
	ПомощникТестирования.ДобавитьФлагJSON(Аргументы);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 1790,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьEDT_JSON() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageEDT.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументSources(Аргументы, ПомощникТестирования.КаталогИсходниковКонфигурацииEDT());
	ПомощникТестирования.ДобавитьАргументFormat(Аргументы, "EDT");
	
	ПомощникТестирования.ДобавитьФлагJSON(Аргументы);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 1790,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьКонфигурациюXML() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "configurationXML.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 393,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьКонфигурациюEDT() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageEDT.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "configurationEDT.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 393,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьРасширениеXML() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "extensionXML.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 11,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьРасширениеEDT() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageEDT.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "extensionEDT.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 11,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьВнешнийМодульXML() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageXML.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "externalXML.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 12,
		"Проверка количества строк в результате");
	
КонецПроцедуры

Процедура ТестДолжен_КонвертироватьВнешнийМодульEDT() Экспорт
	
	ИмяФайлаРезультатов = ОбъединитьПути(КаталогСборки, "coverageEDT.xml");
	ИмяФайлаКонфигурации = ОбъединитьПути(ПомощникТестирования.КаталогНастроек(), "externalEDT.json");
	
	Аргументы = Новый Массив;
	ПомощникТестирования.ДобавитьАргументInput(Аргументы, ФайлПокрытияCSV());
	ПомощникТестирования.ДобавитьАргументOutput(Аргументы, ИмяФайлаРезультатов);
	ПомощникТестирования.ДобавитьАргументWorkspace(Аргументы, ПомощникТестирования.КаталогТестовыхДанных());
	ПомощникТестирования.ДобавитьАргументСonfig(Аргументы, ИмяФайлаКонфигурации);
	
	ПомощникТестирования.ВыполнитьКомандуКонвертировать(Аргументы);
	
	Утверждения.ПроверитьИстину(
		ФС.ФайлСуществует(ИмяФайлаРезультатов),
		"Файл с результатами должен существовать");
	
	ЧислоСтрок = ПомощникТестирования.ЧислоСтрокРезультата(ИмяФайлаРезультатов);
	
	Утверждения.ПроверитьРавенство(ЧислоСтрок, 12,
		"Проверка количества строк в результате");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФайлПокрытияCSV()
	Возврат ОбъединитьПути(ПомощникТестирования.КаталогЗамеров(), "coverage.csv");
КонецФункции

#КонецОбласти